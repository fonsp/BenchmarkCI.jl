var documenterSearchIndex = {"docs":
[{"location":"#BenchmarkCI.jl","page":"BenchmarkCI.jl","title":"BenchmarkCI.jl","text":"","category":"section"},{"location":"","page":"BenchmarkCI.jl","title":"BenchmarkCI.jl","text":"BenchmarkCI\nBenchmarkCI.judge\nBenchmarkCI.postjudge\nBenchmarkCI.displayjudgement\nBenchmarkCI.pushresult","category":"page"},{"location":"#BenchmarkCI","page":"BenchmarkCI.jl","title":"BenchmarkCI","text":"BenchmarkCI.jl\n\n(Image: Lifecycle) [![CI Status][ci-img]][ci-url] [![codecov.io][codecov-img]][codecov-url]\n\nBenchmarkCI.jl provides an easy way to run benchmark suite via GitHub Actions.  It only needs a minimal setup if there is a benchmark suite declared by BenchmarkTools.jl / PkgBenchmark.jl API.\n\nWarning This package is still experimental.  Make sure to fix the version number in your CI setup.\n\nSetup\n\nBenchmarkCI.jl requires PkgBenchmark.jl to work.  See Defining a benchmark suite Â· PkgBenchmark.jl for more information.  BenchmarkCI.jl also requires a Julia project benchmark/Project.toml that is used for running the benchmark.\n\nCreate a workflow file (required)\n\nCreate (say) .github/workflows/benchmark.yml with the following configuration:\n\nname: Run benchmarks\n\non:\n  pull_request:\n\njobs:\n  Benchmark:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v2\n      - uses: julia-actions/setup-julia@latest\n        with:\n          version: 1.4\n      - name: Install dependencies\n        run: julia -e 'using Pkg; pkg\"add PkgBenchmark BenchmarkCI@0.1\"'\n      - name: Run benchmarks\n        run: julia -e 'using BenchmarkCI; BenchmarkCI.judge()'\n      - name: Post results\n        run: julia -e 'using BenchmarkCI; BenchmarkCI.postjudge()'\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n\nIf you don't want to benchmark your code for every push of every PR, then you can conditionally trigger the jobs on a label:\n\nname: Run benchmarks\n\non:\n  pull_request:\n    types: [labeled, opened, synchronize, reopened]\n\n# Only trigger the benchmark job when you add `run benchmark` label to the PR\njobs:\n  Benchmark:\n    runs-on: ubuntu-latest\n    if: contains(github.event.pull_request.labels.*.name, 'run benchmark')\n    steps:\n      - uses: actions/checkout@v2\n      - uses: julia-actions/setup-julia@latest\n        with:\n          version: 1.4\n      - name: Install dependencies\n        run: julia -e 'using Pkg; pkg\"add PkgBenchmark BenchmarkCI@0.1\"'\n      - name: Run benchmarks\n        run: julia -e 'using BenchmarkCI; BenchmarkCI.judge()'\n      - name: Post results\n        run: julia -e 'using BenchmarkCI; BenchmarkCI.postjudge()'\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n\nSetup with benchmark/Manifest.toml\n\nIf benchmark/Manifest.toml is checked into the repository, benchmark/Project.toml must include parent project as well.  Run dev .. in benchmark/ directory to add it:\n\nshell> cd ~/.julia/dev/MyProject/\n\nshell> cd benchmark/\n\n(@v1.x) pkg> activate .\nActivating environment at `~/.julia/dev/MyProject/benchmark/Project.toml`\n\n(benchmark) pkg> dev ..\n\nAdditional setup (recommended)\n\nIt is recommended to add following two lines in .gitignore:\n\n/.benchmarkci\n/benchmark/*.json\n\nThis is useful for running BenchmarkCI locally (see below).\n\nPrinting benchmark result (optional)\n\nPosting the benchmark result as a comment for every push for each PR may be too noisy.  In such case, using BenchmarkCI.displayjudgement() instead of BenchmarkCI.postjudge() may be useful.\n\n      - name: Print judgement\n        run: julia -e 'using BenchmarkCI; BenchmarkCI.displayjudgement()'\n\nStore benchmark result in a Git branch (optional; very experimental)\n\nAlternatively, the benchmark result and report markdown can be pushed to a git branch benchmark-results (example).\n\n      - name: Push results\n        run: julia -e \"using BenchmarkCI; BenchmarkCI.pushresult()\"\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n          SSH_KEY: ${{ secrets.DOCUMENTER_KEY }}\n\nWARNING: Storage format may be changed across releases.\n\nRunning BenchmarkCI interactively\n\nshell> cd ~/.julia/dev/MyProject/\n\njulia> using BenchmarkCI\n\njulia> BenchmarkCI.judge()\n...\n\njulia> BenchmarkCI.displayjudgement()\n...\n\n[ci-img]: https://github.com/tkf/BenchmarkCI.jl/workflows/Run%20tests/badge.svg [ci-url]: https://github.com/tkf/BenchmarkCI.jl/actions?query=workflow%3A%22Run+tests%22 [codecov-img]: http://codecov.io/github/tkf/BenchmarkCI.jl/coverage.svg?branch=master [codecov-url]: http://codecov.io/github/tkf/BenchmarkCI.jl?branch=master\n\n\n\n\n\n","category":"module"},{"location":"#BenchmarkCI.judge","page":"BenchmarkCI.jl","title":"BenchmarkCI.judge","text":"judge()\n\nRun benchmarkpkg on target and baseline.\n\nKeyword Arguments\n\ntarget :: Union{Nothing, AbstractString, BenchmarkConfig} = nothing: Benchmark target configuration.  Default to the checked out working tree.  A git commitish can be passed as a string.  PkgBenchmark.BenchmarkConfig can be used for more detailed control (see PkgBenchmark.jl manual).\nbaseline :: Union{AbstractString, BenchmarkConfig} = \"origin/master\": Benchmark baseline configuration.  See target.\npkgdir :: AbstractString = pwd(): Package root directory.\nscript :: AbstractString = \"$pkgdir/benchmark/benchmarks.jl\": The script that defines the SUITE global variable/constant.\nproject :: AbstractString = dirname(script): The project used to define and run benchmarks.\npostprocess, retune, verbose, logger_factory: Passed to PkgBenchmark.benchmarkpkg.\n\n\n\n\n\n","category":"function"},{"location":"#BenchmarkCI.postjudge","page":"BenchmarkCI.jl","title":"BenchmarkCI.postjudge","text":"postjudge(; title = \"Benchmark result\")\n\nPost judgement as comment.\n\n\n\n\n\n","category":"function"},{"location":"#BenchmarkCI.displayjudgement","page":"BenchmarkCI.jl","title":"BenchmarkCI.displayjudgement","text":"displayjudgement()\n\nPrint result of BenchmarkCI.judge.\n\n\n\n\n\n","category":"function"},{"location":"#BenchmarkCI.pushresult","page":"BenchmarkCI.jl","title":"BenchmarkCI.pushresult","text":"pushresult(; url, branch, sshkey, title)\n\nPush benchmark result to branch in url.\n\nKeyword Arguments\n\nurl::Union{AbstractString,Nothing} = nothing: Repository URL.\nbranch::AbstractString = \"benchmark-results\": Branch where the results are pushed.\nsshkey::Union{AbstractString,Nothing} = nothing: Documenter.jl-style SSH private key (base64-encoded private key).\ntitle::AbstractString = \"Benchmark result\": The title to be used in benchmark report.\n\n\n\n\n\n","category":"function"}]
}
